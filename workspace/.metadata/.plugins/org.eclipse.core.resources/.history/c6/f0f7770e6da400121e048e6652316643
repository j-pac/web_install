public class CodigoDeHamming extends TecnicaControloErros {


	@Override
	public void definirEstruturaTramaAEnviar(int tamanho_mensagem) {
		definirTamanhoMensagem(tamanho_mensagem);
		definirTrama(tamanho_mensagem == 4 ? 7 : 15);
	}

	@Override
	public int[] geracaoTramaAEnviar(int[] dados_a_enviar) {

		// Marca na trama o local dos bits de paridade sinalizando-os com -1
		localizarBitsParidade();

		// Introduçao da mensagem por ordem na trama, nos locais nao marcados
		// para bits de paridade
		int dados_index = 0;
		for (int i = 0; i < getTotalLength(); i++) {
			if (consultarBit(i) != -1) {
				definirBit(i, dados_a_enviar[dados_index]);
				dados_index++;
			}
		}
		assert (dados_index + 1 == getMessageLength()) : "--> Deu bronca: -O Algoritmo nao esta a funcionar correctamente!";

		// Calculo e introdução dos bits de paridade na trama
		// A FALTAR !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
	}
	
	public void calcularBitParidade(int mod2) {
		int resultado = 0;
		int j;
		
		for(int i = mod2 - 1; i < getTotalLength(); i = j + 1) {
			for(j = 0; j < mod2; j++) {
				resultado = XOR(resultado, consultarBit(i + j));
			}
		}
		return resultado;
	}

	@Override
	public boolean deteccaoErros(int[] trama_recebida) {
		// TODO Auto-generated method stub
		return false;
	}

	private void localizarBitsParidade() {
		int i = 0;

		while (Math.pow(2, i) <= getTotalLength()) {
			definirBit((int) (Math.pow(2, i) - 1), -1);
			i++;
		}
	}

	@Override
	public String toString() {
		return super.toString() + " Código de Hamming"
				+ System.getProperty("line.separator")
				+ "Tamanho da mensagem: "
				+ getMessageLength() + " bits"
				+ System.getProperty("line.separator");

	}
}
